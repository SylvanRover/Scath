<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle_right</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>scr_zDepth</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set Alarm
alarm[0]=10;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set Variables

phy_fixed_rotation=true;
enemyTargeting = false;
alarmFinished = false;
dir = direction;
combatAxisObject = true;
combatAxisWorld = false;
los = 60;
distanceToEnemy = 10000;
inRange = false;
nth_target=1;
switchTarget = true;
targetInRange = false;
block = false;
attackR = false;
attackL = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set attacks to false

attackL = false;
attackR = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Alarm Finished
alarmFinished = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>scr_depthCorrection</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Death
if (obj_player_health.hp_current &lt;= 0 &amp;&amp; image_alpha != 0)
{
    image_alpha = 0;
    instance_create(x,y,obj_death);
    phy_speed_x = 0;
    phy_speed_y = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement

mbLeftRelease = mouse_check_button_released(mb_left);
mbLeftCheck = mouse_check_button(mb_left);
vkLShiftCheck = keyboard_check_pressed(vk_lshift);
target = instance_nth_nearest(x,y,par_enemy,nth_target);
enemyTargetX = instance_nearest(x, y-12, obj_enemyTargeting).x;
enemyTargetY = instance_nearest(x, y-12, obj_enemyTargeting).y;


if (obj_player_health.hp_current &gt; 0)
{
    // Basic Movement
    if (mbLeftCheck &amp;&amp; !enemyTargeting) 
    {
        instance_create(mouse_x, mouse_y, obj_moveToCursor);
        dir = point_direction(x, y, obj_moveToCursor.x, obj_moveToCursor.y);
        phy_speed_x = lengthdir_x(obj_playerController.speedX, dir); //SPEED is the speed you want to move at.
        phy_speed_y = lengthdir_y(obj_playerController.speedY, dir);
        direction = dir;
    }
    
    if (mbLeftRelease &amp;&amp; !enemyTargeting)
    {
        instance_create(mouse_x, mouse_y, obj_moveToPoint);
        dir = point_direction(x, y, obj_moveToPoint.x, obj_moveToPoint.y);
        phy_speed_x = lengthdir_x(obj_playerController.speedX, dir); //SPEED is the speed you want to move at.
        phy_speed_y = lengthdir_y(obj_playerController.speedY, dir);
        direction = dir;
    }
    
    // Enemy Targeting Movement
    if (enemyTargeting)
    {
        if (switchTarget)
        {
            instance_create(target.x,target.y,obj_enemyTargeting);
            direction = point_direction(x, y, enemyTargetX, enemyTargetY);
            switchTarget = false;
            targetInRange = true;
            
        }
            
        // Strafing            
        if (mbLeftCheck) 
        {
            instance_create(mouse_x, mouse_y, obj_moveToCursor);
            dir = point_direction(x, y, obj_moveToCursor.x, obj_moveToCursor.y);
            phy_speed_x = lengthdir_x(obj_playerController.speedX, dir); //SPEED is the speed you want to move at.
            phy_speed_y = lengthdir_y(obj_playerController.speedY, dir);
            direction = point_direction(x, y, enemyTargetX, enemyTargetY);
        }
        
        if (mbLeftRelease)
        {
            instance_create(mouse_x, mouse_y, obj_moveToPoint);
            dir = point_direction(x, y, obj_moveToPoint.x, obj_moveToPoint.y);
            phy_speed_x = lengthdir_x(obj_playerController.speedX, dir); //SPEED is the speed you want to move at.
            phy_speed_y = lengthdir_y(obj_playerController.speedY, dir);
            direction = point_direction(x, y, enemyTargetX, enemyTargetY);
        }
    }
    
    // Target In Range
    if (collision_ellipse(x-(los*2), y-((los)+8), x+(los*2), y+((los)+8), target, false, true))
    {
        inRange = true;
    }
    else
    {
        inRange = false;
        nth_target = 1
    }
    
    if (collision_ellipse(x-(los*2), y-((los)+8), x+(los*2), y+((los)+8), obj_enemyTargeting, false, true))
    {
        targetInRange = true;
    }
    else
    {
        targetInRange = false;
        enemyTargeting = false;
        nth_target = 1
    }
        
    //Enemy Targeting
    if (!inRange || enemyTargeting &amp;&amp; vkLShiftCheck &amp;&amp; alarmFinished)
    {
        alarmFinished = false;
        enemyTargeting = false;
        alarm[0] = 2;
    }
    
    if (inRange &amp;&amp; !enemyTargeting &amp;&amp; vkLShiftCheck &amp;&amp; alarmFinished)
    {
        alarmFinished = false;
        enemyTargeting = true;
        alarm[0] = 2;
        switchTarget = true;
        nth_target = 1
        
        switch nth_target
        {
            case 1: nth_target = 1; break //switch the target between the 1st,2nd and 3rd closest enemies
            case 2: nth_target = 2; break
            case 3: nth_target = 3; break
        }
        
    }
    
    // Cycle Targets
    if (keyboard_check_pressed(ord('E')))
    {
        nth_target += 1;
        switchTarget = true;
    }
    if (keyboard_check_pressed(ord('Q')))
    {
        nth_target -= 1;        
        switchTarget = true;
    }
    if (nth_target &lt; 1) nth_target = 1;
    if (nth_target &gt; 3) nth_target = 3;
    
    
    //Stop Movement on collision with Cursor and Point
    if (collision_circle(x, y, 8, obj_moveToPoint,true,true))
    {
        phy_speed_x = 0;
        phy_speed_y = 0;
    }
    if (collision_circle(x, y, 8, obj_moveToCursor,true,true))
    {
        phy_speed_x = 0;
        phy_speed_y = 0;
    }
        
    //Sprite Directions
    d = (direction + 45) div 90;
    
    if (phy_speed_x = 0 &amp;&amp; phy_speed_y = 0 &amp;&amp; !attackR)
    {
        switch (d) 
        {     
            case 0: sprite_index = spr_player_idle_right; break;    
            case 1: sprite_index = spr_player_idle_up;  break;    
            case 2: sprite_index = spr_player_idle_left; break;    
            case 3: sprite_index = spr_player_idle_down;  break; 
        }
        
        if (direction &gt;= 315) sprite_index = spr_player_idle_right;
    }
    
    if ((phy_speed_x != 0 || phy_speed_y != 0) &amp;&amp; !attackR)
    {
        switch (d) 
        {     
            case 0: sprite_index = spr_player_walk_right; break;    
            case 1: sprite_index = spr_player_walk_up;  break;    
            case 2: sprite_index = spr_player_walk_left; break;    
            case 3: sprite_index = spr_player_walk_down;  break; 
        }
        
        if (direction &gt;= 315 &amp;&amp; !attackR) sprite_index = spr_player_walk_right;
    }
        
    //Vertical Speed Clamp
    if (phy_speed_y &gt; obj_playerController.speedY) phy_speed_y = obj_playerController.speedY;
    if (phy_speed_y &lt; -obj_playerController.speedY) phy_speed_y = -obj_playerController.speedY;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Combat

if (obj_player_health.hp_current &gt; 0)
{               
    // Melee Attack
    if (direction &gt;= 0 &amp;&amp; direction &lt; 45 || direction &gt; 315) // Right
    {
        if (combatAxisObject) 
        {
            if (keyboard_check (ord('W')) &amp;&amp; !attackR)
            {
                block = true;            
                sprite_index = spr_player_block_right;
            }
            if (!keyboard_check (ord('W')))
            {
                block = false;
            }
            
            if (keyboard_check_released (ord('A')))
            {
                attackL = true;
            }
            if (keyboard_check_released (ord('S')))
            {
                
            }
            if (keyboard_check_released (ord('D')) &amp;&amp; !attackR &amp;&amp; !block)
            {
                sprite_index = spr_player_attack_right;
                attackR = true;
                alarm[1]=8;
                instance_create(x+28, y-12, obj_attack_swipe);
            }
                        
        }
    }
    
    if (direction &gt;= 45 &amp;&amp; direction &lt;= 135) // Up
    {
        if (combatAxisObject) 
        {
            if (keyboard_check (ord('W')) &amp;&amp; !attackR)
            {
                block = true;            
                sprite_index = spr_player_block_up;
            }
            if (!keyboard_check (ord('W')))
            {
                block = false;
            }
            
            if (keyboard_check_released (ord('A')))
            {
                attackL = true;
            }
            if (keyboard_check_released (ord('S')))
            {
                sprite_index = spr_player_attack_up;
            }
            if (keyboard_check_released (ord('D')) &amp;&amp; !attackR &amp;&amp; !block)
            {
                attackR = true;
                sprite_index = spr_player_attack_up;
                alarm[1]=8;
                instance_create(x, y-32, obj_attack_swipe);
            }
        }
    }
    
    if (direction &gt; 135 &amp;&amp; direction &lt; 225) // Left
    {
        if (combatAxisObject) 
        {
            if (keyboard_check (ord('W')) &amp;&amp; !attackR)
            {
                block = true;            
                sprite_index = spr_player_block_left;
            }
            if (!keyboard_check (ord('W')))
            {
                block = false;
            }
            
            if (keyboard_check_released (ord('A')))
            {
                attackL = true;
            }
            if (keyboard_check_released (ord('S')))
            {
                sprite_index = spr_player_attack_left;
            }
            if (keyboard_check_released (ord('D')) &amp;&amp; !attackR &amp;&amp; !block)
            {
                attackR = true;
                sprite_index = spr_player_attack_left;
                alarm[1]=8;
                instance_create(x-28, y-12, obj_attack_swipe);
            }
        }
    }
    
    if (direction &gt;= 225 &amp;&amp; direction &lt;= 315) // Down
    {
        if (combatAxisObject) 
        {
            if (keyboard_check (ord('W')) &amp;&amp; !attackR)
            {
                block = true;            
                sprite_index = spr_player_block_down;
            }
            if (!keyboard_check (ord('W')))
            {
                block = false;
            }
            
            if (keyboard_check_released (ord('A')))
            {
                attackL = true;
            }
            if (keyboard_check_released (ord('S')))
            {
                sprite_index = spr_player_attack_down;
            }
            if (keyboard_check_released (ord('D')) &amp;&amp; !attackR &amp;&amp; !block)
            {
                attackR = true;
                sprite_index = spr_player_attack_down;
                alarm[1]=8;
                instance_create(x, y+8, obj_attack_swipe);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy_attack">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Damage

if (!obj_player.block) obj_player_health.hp_current -= 1;
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collide With
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_rock_grassy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collide With
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw LoS Circle

draw_set_halign(fa_center);
draw_set_valign(fa_center);

draw_self();

draw_set_color(c_black);
draw_ellipse (x-(los*2), y-((los)+8), x+(los*2), y+((los)+8), true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>0.100000001490116</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>20,32</point>
    <point>12,32</point>
    <point>8,28</point>
    <point>12,24</point>
    <point>20,24</point>
    <point>24,28</point>
  </PhysicsShapePoints>
</object>
