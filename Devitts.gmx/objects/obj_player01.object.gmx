<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle_right</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>scr_zDepth</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>scr_depthCorrection</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Health

if (health &lt;= 0 &amp;&amp; image_alpha != 0)
{
    image_alpha = 0;
    instance_create(x,y,obj_death);
    phy_speed_x = 0;
    phy_speed_y = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Basic Movement

phy_fixed_rotation=true;

dir = direction;
mbLeftRelease = mouse_check_button_released(mb_left);
mbLeftCheck = mouse_check_button(mb_left);
vkLShiftCheck = keyboard_check(vk_lshift);

if (health &gt; 0)
{
    //Move Towards Cursor and Point
    /*if (mouse_check_button(mb_left) &amp;&amp; !keyboard_check(vk_lshift)) 
    {
        instance_create(mouse_x, mouse_y, obj_moveToCursor);
        move_towards_point(mouse_x, mouse_y, obj_player01Controller.basicHSpeed);
    }
    
    if (mouse_check_button_released(mb_left) &amp;&amp; !keyboard_check(vk_lshift)) 
    {
        instance_create(mouse_x, mouse_y, obj_moveToPoint);
        move_towards_point (obj_moveToPoint.x, obj_moveToPoint.y, obj_player01Controller.basicHSpeed);
    }*/
    
    //Move Towards Cursor and Point - Physics
    if (mbLeftCheck &amp;&amp; !vkLShiftCheck) 
    {
        instance_create(mouse_x, mouse_y, obj_moveToCursor);
        dir = point_direction(x, y, obj_moveToCursor.x, obj_moveToCursor.y);
        phy_speed_x = lengthdir_x(obj_player01Controller.basicHSpeed, dir); //SPEED is the speed you want to move at.
        phy_speed_y = lengthdir_y(obj_player01Controller.basicVSpeed, dir);
        direction = dir;
    }
    
    if (mbLeftRelease &amp;&amp; !vkLShiftCheck)
    {
        instance_create(mouse_x, mouse_y, obj_moveToPoint);
        dir = point_direction(x, y, obj_moveToPoint.x, obj_moveToPoint.y);
        phy_speed_x = lengthdir_x(obj_player01Controller.basicHSpeed, dir); //SPEED is the speed you want to move at.
        phy_speed_y = lengthdir_y(obj_player01Controller.basicVSpeed, dir);
        direction = dir;
    }
    
    //Stop Movement on collision with Cursor and Point
    if (collision_circle(x, y, 8, obj_moveToPoint,true,true))
    {
        phy_speed_x = 0;
        phy_speed_y = 0;
    }
    if (collision_circle(x, y, 8, obj_moveToCursor,true,true))
    {
        phy_speed_x = 0;
        phy_speed_y = 0;
    }
        
    //Sprite Directions
    d = (direction + 45) div 90; 
    switch (d) 
    {     
        case 0: sprite_index = spr_player_idle_right; break;    
        case 1: sprite_index = spr_player_idle_up;  break;    
        case 2: sprite_index = spr_player_idle_left; break;    
        case 3: sprite_index = spr_player_idle_down;  break; 
    }
    
    if (direction &gt;= 315) sprite_index = spr_player_idle_right;
    
    /*if (phy_speed_x &gt; 0) 
    {
        image_xscale = obj_player01Controller.xScale;
        sprite_index = spr_capitalist_walk;
    }
    
    if (phy_speed_x &lt; 0) 
    {
        image_xscale = -obj_player01Controller.xScale;
        sprite_index = spr_capitalist_walk;
    }
    
    if (phy_speed_x = 0 &amp;&amp; phy_speed_y = 0) sprite_index = spr_capitalist_idle;*/
    
    //Vertical Speed Clamp
    if (phy_speed_y &gt; obj_player01Controller.basicVSpeed) phy_speed_y = obj_player01Controller.basicVSpeed;
    if (phy_speed_y &lt; -obj_player01Controller.basicVSpeed) phy_speed_y = -obj_player01Controller.basicVSpeed;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Attack Movement

if (health &gt; 0)
{
    if keyboard_check(vk_lshift)
    {
        phy_speed_x = 0;
        phy_speed_y = 0;
    
        if keyboard_check(ord("W")) 
        {
            phy_speed_y = -obj_player01Controller.attackVSpeed;
            direction = 90;
        }
        
        if keyboard_check_released(ord("W"))
        {
            phy_speed_y += obj_player01Controller.attackVSpeed;
        }
        
        if keyboard_check(ord("A"))
        {
            phy_speed_x = -obj_player01Controller.attackHSpeed;
            direction = 180;
        }
        
        if keyboard_check_released(ord("A"))
        {
            phy_speed_x += obj_player01Controller.attackHSpeed;
        }
        
        if keyboard_check(ord("S"))
        {
            phy_speed_y = obj_player01Controller.attackVSpeed;
            direction = 270;
        }
        
        if keyboard_check_released(ord("S"))
        {
            phy_speed_y -= obj_player01Controller.attackVSpeed;
        }
        
        if keyboard_check(ord("D"))
        {
            phy_speed_x = obj_player01Controller.attackHSpeed;
            direction = 0;
        }
        
        if keyboard_check_released(ord("D"))
        {
            phy_speed_x -= obj_player01Controller.attackHSpeed;
        }
    }
    
    if keyboard_check_released(vk_lshift) 
    {
        phy_speed_x = 0;
        phy_speed_y = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_rock_grassy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collide With
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy_skeleton">
      <action>
        <libid>1</libid>
        <id>721</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_health</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>-1</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>-1</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>0.100000001490116</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>20,32</point>
    <point>12,32</point>
    <point>8,28</point>
    <point>12,24</point>
    <point>20,24</point>
    <point>24,28</point>
  </PhysicsShapePoints>
</object>
